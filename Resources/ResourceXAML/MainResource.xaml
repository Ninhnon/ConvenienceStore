<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vmTrouble="clr-namespace:ConvenienceStore.ViewModel.TroubleWindowVM"
                    xmlns:staffViewModel="clr-namespace:ConvenienceStore.ViewModel.StaffVM"
                    xmlns:vmLogin="clr-namespace:ConvenienceStore.ViewModel.Login"
                    xmlns:converter="clr-namespace:ConvenienceStore.ViewModel.Admin.Converters"
                    xmlns:vmAdminVM="clr-namespace:ConvenienceStore.ViewModel.Admin.AdminVM"
                    xmlns:vmAdmin="clr-namespace:ConvenienceStore.ViewModel.Admin"
                    xmlns:subViewModel="clr-namespace:ConvenienceStore.ViewModel.SubViewModels"
                    >
    <!-- VM của Lâm đẹp troai -->
    <vmAdminVM:InputInfoVM x:Key="InputInfoVM"/>
    <vmAdminVM:SupplierVM x:Key="SupplierVM"/>
    <vmAdminVM:ProfileVM x:Key="AdminProfileVM"/>
    <vmAdminVM:VoucherVM x:Key="VoucherVM"/>
    <vmAdminVM:ProductVM x:Key="ProductVM"/>

    <vmAdminVM:TroubleAdminVM x:Key="TroubleADVM"/>
    <vmLogin:ForgotPasswordViewModel x:Key="ForgotVM"/>

    <vmAdminVM:ReportViewModel x:Key="ReportVM"/>
    <vmAdminVM:EmployeeViewModel x:Key="EmployeeVM"/>
    <vmAdmin:AdminMainViewModel x:Key="AdminMainWindowVM"/>
    <subViewModel:AddEmployeeViewModel x:Key="AddEmployeeVM"/>
    <subViewModel:SettingViewModel x:Key="SettingVM"/>
    <subViewModel:ChangePasswordViewModel x:Key="ChangePasswordVM"/>
    <vmLogin:LoginViewModel x:Key="LoginVM"/>
    <staffViewModel:MainStaffViewModel x:Key="MainStaffVM"/>
    <staffViewModel:VoucherVM x:Key="VoucherStaffVM"/>
    <vmTrouble:TroublePageViewModel x:Key="TroubleVM"/>
    <staffViewModel:PaymentViewModel x:Key="PaymentVM" />
    <staffViewModel:HistoryViewModel x:Key="HistoryVM" />
    <staffViewModel:ProfileViewModel x:Key="ProfileVM" />
    <converter:IntToVNDCurrency x:Key="MoneyToVNDCurrency" />
    <converter:BoolToVisibilityConverter x:Key="BoolToVis"/>
    <converter:BoolToVisibility x:Key="MyBoolToVisibility"/>
    <!-- primary -->

    <SolidColorBrush x:Key="PrimaryHueLightBrush"
                             Color="#00AF91" />
    <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush"
                             Color="#FFFFFF" />
    <SolidColorBrush x:Key="PrimaryHueMidBrush"
                             Color="#00AF91" />
    <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush"
                             Color="#FFFFFF" />
    <SolidColorBrush x:Key="MyFirstColor"
                             Color="#FFA5B9D6" />
    <SolidColorBrush x:Key="PrimaryHueDarkBrush"
                             Color="#00AF91" />
    <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush"
                             Color="#FFFFFF" />

    <SolidColorBrush x:Key="PrimaryBackgroundColor" Color="#f3f3f3"/>
    <SolidColorBrush x:Key="SecondaryBackgroundColor" Color="#f9f9f9"/>
    <SolidColorBrush x:Key="PrimaryBlueColor" Color="#5B7FFF"/>
    <SolidColorBrush x:Key="PrimaryGrayColor" Color="#BFBFC4"/>
    <SolidColorBrush x:Key="SecondaryBlueColor" Color="#CEE8FB"/>
    <SolidColorBrush x:Key="SecondaryGrayColor" Color="#EEEEEE"/>
    <SolidColorBrush x:Key="TextPrimaryColor" Color="#020F16"/>
    <SolidColorBrush x:Key="TextSecondaryColor" Color="#434344"/>
    <SolidColorBrush x:Key="ActionIconColor" Color="#434344"/>
    <SolidColorBrush x:Key="FloralWhite" Color="#FFFAF0"/>

    <!--accent-->
    <SolidColorBrush x:Key="SecondaryHueMidBrush" Color="#5C5B5E" />
    <SolidColorBrush x:Key="SecondaryHueMidForegroundBrush" Color="#FFFFFF" />

    <!--Other color-->
    <SolidColorBrush x:Key="Mercury" Color="#E8E8E8"/>

    <!-- Start: Button | Minimize | Maximize | Close -->
    <Style x:Key="IconButtonsStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="25"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="bd" CornerRadius="5" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Path Name="ico" Data="{TemplateBinding Content}" Fill="{DynamicResource ActionIconColor}" Height="10" Width="10" Stretch="Uniform"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PrimaryGrayColor}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Tag" Value="IsCloseButton"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#F72626"/>
                            <Setter TargetName="ico" Property="Fill" Value="{DynamicResource PrimaryBackgroundColor}"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ico" Property="Fill" Value="{DynamicResource PrimaryBackgroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- End: Button | Minimize | Maximize | Close -->

    <!-- Start: Menu Icon -->
    <Style x:Key="MenuIconStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Viewbox Height="20" Width="20" Margin="0 6 0 0" Stretch="UniformToFill">
                            <Canvas Height="512" Width="512">
                                <Path x:Name="ico" Data="m32 0h448c17.671875 0 32 14.328125 32 32s-14.328125 32-32 32h-448c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32zm0 0" Fill="{DynamicResource PrimaryGrayColor}" Margin="0 0 0 0"/>
                                <Path x:Name="ico1" Data="m32 128h448c17.671875 0 32 14.328125 32 32s-14.328125 32-32 32h-448c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32zm0 0" Fill="{DynamicResource PrimaryGrayColor}" Margin="0 20 0 0"/>
                                <Path x:Name="ico2" Data="m32 256h448c17.671875 0 32 14.328125 32 32s-14.328125 32-32 32h-448c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32zm0 0" Fill="{DynamicResource PrimaryGrayColor}" Margin="0 40 0 0"/>
                            </Canvas>
                        </Viewbox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFFFFF"/>
                            <Setter Property="Fill" TargetName="ico" Value="{DynamicResource PrimaryBlueColor}"/>
                            <Setter Property="Fill" TargetName="ico1" Value="{DynamicResource PrimaryBlueColor}"/>
                            <Setter Property="Fill" TargetName="ico2" Value="{DynamicResource PrimaryBlueColor}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- End: Menu Icon -->

    <!-- Start: VerticalMenuStyle -->
    <Style x:Key="MenuRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryGrayColor}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="menuButton"  Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                            <!-- Selected  -->
                            <Border x:Name="btnSelected" Grid.ColumnSpan="2"  CornerRadius="4" Width="210" HorizontalAlignment="Right"/>

                            <!-- Indicator -->
                            <Rectangle Name="Indicator" HorizontalAlignment="Left" Width="4" Height="40" VerticalAlignment="Center" RadiusX="2" RadiusY="2"/>

                            <!-- Icon -->
                            <Path x:Name="Icon" Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type RadioButton}}}" Height="24" Width="24" Stretch="None" Fill="{DynamicResource PrimaryGrayColor}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0 0 5 0"/>

                            <!-- Text -->
                            <TextBlock x:Name="txtName" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="12 0 0 0"
                                                Grid.Column="1" Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}"
                                                FontWeight="{TemplateBinding FontWeight}"
                                                FontSize="{TemplateBinding FontSize}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="txtName" Property="Foreground" Value="{DynamicResource PrimaryBlueColor}"/>
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource PrimaryBlueColor}"/>
                            <!-- Optional 
                            <Setter TargetName="Indicator" Property="Fill" Value="red"/>
                            <Setter TargetName="Indicator" Property="Height" Value="20"/>-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource PrimaryBlueColor}"/>
                            <Setter TargetName="Indicator" Property="Fill" Value="{DynamicResource PrimaryBlueColor}"/>
                            <Setter TargetName="Indicator" Property="Height" Value="20"/>
                            <Setter TargetName="btnSelected" Property="Background" Value="{DynamicResource SecondaryGrayColor}"/>
                            <Setter TargetName="txtName" Property="Foreground" Value="{DynamicResource PrimaryBlueColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Stop: VerticalMenuStyle -->


    <!--Start: Receipt Button Style-->
    <Style x:Key="ReceiptButtonStyle" 
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource MaterialDesignRaisedDarkButton}">
        <Setter Property="VerticalAlignment"
                                Value="Bottom"/>
        <Setter Property="HorizontalAlignment"
                Value="Right"/>
        <Setter Property="Width"
                Value="70"/>
        <Setter Property="Height"
                Value="30"/>
        <Setter Property="FontSize"
                Value="12"/>
    </Style>
    <!--Start: Receipt Button Style-->
</ResourceDictionary>